name: Docker CI/CD with AWS Deploy
on:
  push:
    branches: ["main"]
jobs:
  build-test-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Debug show all files
        run: |
          pwd
          ls -R
          
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_KEY }}
          
      - name: Build Flask app image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/flask_app:test
          
      - name: Start docker-compose
        run: docker compose up -d
        
      - name: Wait for containers
        run: sleep 20
        
      - name: Run tester script
        run: |
          find . -name "check.sh" -exec chmod +x {} \;
          find . -name "check.sh" -exec {} \;
          
      - name: Show container logs on failure
        if: failure()
        run: |
          echo "Tests failed! Showing logs:"
          docker logs flask_app || true
          docker logs flask_mysql || true
          
      - name: Stop containers
        if: always()
        run: docker compose down -v
        
      - name: Push image to Docker Hub
        if: success()
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/flask_app:latest

      # דיפלוי פשוט עם Docker
      - name: Deploy to AWS EC2
        if: success()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT || 22 }}
          script: |
            echo "🚀 Starting deployment to AWS..."
            
            # עצירת הקונטיינר הקיים
            sudo docker stop flask_app || true
            sudo docker rm flask_app || true
            
            # ניקוי images ישנים
            sudo docker image prune -f || true
            
            # משיכת הגרסה החדשה מ-Docker Hub
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/flask_app:latest
            
            # הרצת הקונטיינר החדש על פורט 5000
            sudo docker run -d \
              --name flask_app \
              -p 5000:5000 \
              --restart unless-stopped \
              ${{ secrets.DOCKER_HUB_USERNAME }}/flask_app:latest
            
            # בדיקה שהקונטיינר רץ
            sleep 5
            if sudo docker ps | grep flask_app; then
              echo "✅ Container is running successfully!"
              echo "🌐 Application available at: http://${{ secrets.AWS_HOST }}:5000"
            else
              echo "❌ Container failed to start"
              sudo docker logs flask_app
              exit 1
            fi
            
            echo "✅ Deployment completed successfully!"
            
      # אלטרנטיבה: דיפלוי עם docker-compose בשרת
      - name: Deploy with docker-compose to AWS
        if: success()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT || 22 }}
          script: |
            cd /home/ubuntu/your-app  # נתיב לתיקיית האפליקציה בשרת
            
            # עדכון הקוד מ-Git
            git pull origin main
            
            # עדכון הקונטיינרים
            docker-compose pull
            docker-compose up -d --force-recreate
            
            # ניקוי
            docker system prune -f
            
      # הודעת הצלחה
      - name: Deployment Success Notification
        if: success()
        run: |
          echo "🎉 Full CI/CD pipeline completed successfully!"
          echo "✅ Image built and tested"
          echo "✅ Image pushed to Docker Hub"
          echo "✅ Application deployed to AWS server"
